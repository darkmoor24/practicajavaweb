"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/tsparticles-shape-image";
exports.ids = ["vendor-chunks/tsparticles-shape-image"];
exports.modules = {

/***/ "(ssr)/./node_modules/tsparticles-shape-image/cjs/GifUtils/ByteStream.js":
/*!*************************************************************************!*\
  !*** ./node_modules/tsparticles-shape-image/cjs/GifUtils/ByteStream.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ByteStream = void 0;\nclass ByteStream {\n    constructor(bytes) {\n        this.pos = 0;\n        this.data = new Uint8ClampedArray(bytes);\n    }\n    getString(count) {\n        const slice = this.data.slice(this.pos, this.pos + count);\n        this.pos += slice.length;\n        return slice.reduce((acc, curr) => acc + String.fromCharCode(curr), \"\");\n    }\n    nextByte() {\n        return this.data[this.pos++];\n    }\n    nextTwoBytes() {\n        this.pos += 2;\n        return this.data[this.pos - 2] + (this.data[this.pos - 1] << 8);\n    }\n    readSubBlocks() {\n        let blockString = \"\", size = 0;\n        do {\n            size = this.data[this.pos++];\n            for (let count = size; --count >= 0; blockString += String.fromCharCode(this.data[this.pos++])) {\n            }\n        } while (size !== 0);\n        return blockString;\n    }\n    readSubBlocksBin() {\n        let size = 0, len = 0;\n        for (let offset = 0; (size = this.data[this.pos + offset]) !== 0; offset += size + 1) {\n            len += size;\n        }\n        const blockData = new Uint8Array(len);\n        for (let i = 0; (size = this.data[this.pos++]) !== 0;) {\n            for (let count = size; --count >= 0; blockData[i++] = this.data[this.pos++]) {\n            }\n        }\n        return blockData;\n    }\n    skipSubBlocks() {\n        for (; this.data[this.pos] !== 0; this.pos += this.data[this.pos] + 1) {\n        }\n        this.pos++;\n    }\n}\nexports.ByteStream = ByteStream;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMtc2hhcGUtaW1hZ2UvY2pzL0dpZlV0aWxzL0J5dGVTdHJlYW0uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxjQUFjO0FBQ2pEO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLDZDQUE2QztBQUMxRTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IscUNBQXFDO0FBQzdELG1DQUFtQyxjQUFjO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLDJCQUEyQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzLXNoYXBlLWltYWdlL2Nqcy9HaWZVdGlscy9CeXRlU3RyZWFtLmpzPzIxNTIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkJ5dGVTdHJlYW0gPSB2b2lkIDA7XG5jbGFzcyBCeXRlU3RyZWFtIHtcbiAgICBjb25zdHJ1Y3RvcihieXRlcykge1xuICAgICAgICB0aGlzLnBvcyA9IDA7XG4gICAgICAgIHRoaXMuZGF0YSA9IG5ldyBVaW50OENsYW1wZWRBcnJheShieXRlcyk7XG4gICAgfVxuICAgIGdldFN0cmluZyhjb3VudCkge1xuICAgICAgICBjb25zdCBzbGljZSA9IHRoaXMuZGF0YS5zbGljZSh0aGlzLnBvcywgdGhpcy5wb3MgKyBjb3VudCk7XG4gICAgICAgIHRoaXMucG9zICs9IHNsaWNlLmxlbmd0aDtcbiAgICAgICAgcmV0dXJuIHNsaWNlLnJlZHVjZSgoYWNjLCBjdXJyKSA9PiBhY2MgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGN1cnIpLCBcIlwiKTtcbiAgICB9XG4gICAgbmV4dEJ5dGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFbdGhpcy5wb3MrK107XG4gICAgfVxuICAgIG5leHRUd29CeXRlcygpIHtcbiAgICAgICAgdGhpcy5wb3MgKz0gMjtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YVt0aGlzLnBvcyAtIDJdICsgKHRoaXMuZGF0YVt0aGlzLnBvcyAtIDFdIDw8IDgpO1xuICAgIH1cbiAgICByZWFkU3ViQmxvY2tzKCkge1xuICAgICAgICBsZXQgYmxvY2tTdHJpbmcgPSBcIlwiLCBzaXplID0gMDtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgc2l6ZSA9IHRoaXMuZGF0YVt0aGlzLnBvcysrXTtcbiAgICAgICAgICAgIGZvciAobGV0IGNvdW50ID0gc2l6ZTsgLS1jb3VudCA+PSAwOyBibG9ja1N0cmluZyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKHRoaXMuZGF0YVt0aGlzLnBvcysrXSkpIHtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSB3aGlsZSAoc2l6ZSAhPT0gMCk7XG4gICAgICAgIHJldHVybiBibG9ja1N0cmluZztcbiAgICB9XG4gICAgcmVhZFN1YkJsb2Nrc0JpbigpIHtcbiAgICAgICAgbGV0IHNpemUgPSAwLCBsZW4gPSAwO1xuICAgICAgICBmb3IgKGxldCBvZmZzZXQgPSAwOyAoc2l6ZSA9IHRoaXMuZGF0YVt0aGlzLnBvcyArIG9mZnNldF0pICE9PSAwOyBvZmZzZXQgKz0gc2l6ZSArIDEpIHtcbiAgICAgICAgICAgIGxlbiArPSBzaXplO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGJsb2NrRGF0YSA9IG5ldyBVaW50OEFycmF5KGxlbik7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyAoc2l6ZSA9IHRoaXMuZGF0YVt0aGlzLnBvcysrXSkgIT09IDA7KSB7XG4gICAgICAgICAgICBmb3IgKGxldCBjb3VudCA9IHNpemU7IC0tY291bnQgPj0gMDsgYmxvY2tEYXRhW2krK10gPSB0aGlzLmRhdGFbdGhpcy5wb3MrK10pIHtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYmxvY2tEYXRhO1xuICAgIH1cbiAgICBza2lwU3ViQmxvY2tzKCkge1xuICAgICAgICBmb3IgKDsgdGhpcy5kYXRhW3RoaXMucG9zXSAhPT0gMDsgdGhpcy5wb3MgKz0gdGhpcy5kYXRhW3RoaXMucG9zXSArIDEpIHtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBvcysrO1xuICAgIH1cbn1cbmV4cG9ydHMuQnl0ZVN0cmVhbSA9IEJ5dGVTdHJlYW07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tsparticles-shape-image/cjs/GifUtils/ByteStream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tsparticles-shape-image/cjs/GifUtils/Constants.js":
/*!************************************************************************!*\
  !*** ./node_modules/tsparticles-shape-image/cjs/GifUtils/Constants.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.InterlaceSteps = exports.InterlaceOffsets = void 0;\nexports.InterlaceOffsets = [0, 4, 2, 1];\nexports.InterlaceSteps = [8, 8, 4, 2];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMtc2hhcGUtaW1hZ2UvY2pzL0dpZlV0aWxzL0NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0IsR0FBRyx3QkFBd0I7QUFDakQsd0JBQXdCO0FBQ3hCLHNCQUFzQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzLXNoYXBlLWltYWdlL2Nqcy9HaWZVdGlscy9Db25zdGFudHMuanM/YjJhYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSW50ZXJsYWNlU3RlcHMgPSBleHBvcnRzLkludGVybGFjZU9mZnNldHMgPSB2b2lkIDA7XG5leHBvcnRzLkludGVybGFjZU9mZnNldHMgPSBbMCwgNCwgMiwgMV07XG5leHBvcnRzLkludGVybGFjZVN0ZXBzID0gWzgsIDgsIDQsIDJdO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tsparticles-shape-image/cjs/GifUtils/Constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tsparticles-shape-image/cjs/GifUtils/Utils.js":
/*!********************************************************************!*\
  !*** ./node_modules/tsparticles-shape-image/cjs/GifUtils/Utils.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.decodeGIF = exports.getGIFLoopAmount = void 0;\nconst Constants_1 = __webpack_require__(/*! ./Constants */ \"(ssr)/./node_modules/tsparticles-shape-image/cjs/GifUtils/Constants.js\");\nconst ByteStream_1 = __webpack_require__(/*! ./ByteStream */ \"(ssr)/./node_modules/tsparticles-shape-image/cjs/GifUtils/ByteStream.js\");\nfunction parseColorTable(byteStream, count) {\n    const colors = [];\n    for (let i = 0; i < count; i++) {\n        colors.push({\n            r: byteStream.data[byteStream.pos],\n            g: byteStream.data[byteStream.pos + 1],\n            b: byteStream.data[byteStream.pos + 2],\n        });\n        byteStream.pos += 3;\n    }\n    return colors;\n}\nasync function parseExtensionBlock(byteStream, gif, getFrameIndex, getTransparencyIndex) {\n    switch (byteStream.nextByte()) {\n        case 249: {\n            const frame = gif.frames[getFrameIndex(false)];\n            byteStream.pos++;\n            const packedByte = byteStream.nextByte();\n            frame.GCreserved = (packedByte & 0xe0) >>> 5;\n            frame.disposalMethod = (packedByte & 0x1c) >>> 2;\n            frame.userInputDelayFlag = (packedByte & 2) === 2;\n            const transparencyFlag = (packedByte & 1) === 1;\n            frame.delayTime = byteStream.nextTwoBytes() * 0xa;\n            const transparencyIndex = byteStream.nextByte();\n            if (transparencyFlag) {\n                getTransparencyIndex(transparencyIndex);\n            }\n            byteStream.pos++;\n            break;\n        }\n        case 255: {\n            byteStream.pos++;\n            const applicationExtension = {\n                identifier: byteStream.getString(8),\n                authenticationCode: byteStream.getString(3),\n                data: byteStream.readSubBlocksBin(),\n            };\n            gif.applicationExtensions.push(applicationExtension);\n            break;\n        }\n        case 254: {\n            gif.comments.push([getFrameIndex(false), byteStream.readSubBlocks()]);\n            break;\n        }\n        case 1: {\n            if (gif.globalColorTable.length === 0) {\n                throw new EvalError(\"plain text extension without global color table\");\n            }\n            byteStream.pos++;\n            gif.frames[getFrameIndex(false)].plainTextData = {\n                left: byteStream.nextTwoBytes(),\n                top: byteStream.nextTwoBytes(),\n                width: byteStream.nextTwoBytes(),\n                height: byteStream.nextTwoBytes(),\n                charSize: {\n                    width: byteStream.nextTwoBytes(),\n                    height: byteStream.nextTwoBytes(),\n                },\n                foregroundColor: byteStream.nextByte(),\n                backgroundColor: byteStream.nextByte(),\n                text: byteStream.readSubBlocks(),\n            };\n            break;\n        }\n        default:\n            byteStream.skipSubBlocks();\n            break;\n    }\n}\nasync function parseImageBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback) {\n    const frame = gif.frames[getFrameIndex(true)];\n    frame.left = byteStream.nextTwoBytes();\n    frame.top = byteStream.nextTwoBytes();\n    frame.width = byteStream.nextTwoBytes();\n    frame.height = byteStream.nextTwoBytes();\n    const packedByte = byteStream.nextByte(), localColorTableFlag = (packedByte & 0x80) === 0x80, interlacedFlag = (packedByte & 0x40) === 0x40;\n    frame.sortFlag = (packedByte & 0x20) === 0x20;\n    frame.reserved = (packedByte & 0x18) >>> 3;\n    const localColorCount = 1 << ((packedByte & 7) + 1);\n    if (localColorTableFlag) {\n        frame.localColorTable = parseColorTable(byteStream, localColorCount);\n    }\n    const getColor = (index) => {\n        const { r, g, b } = (localColorTableFlag ? frame.localColorTable : gif.globalColorTable)[index];\n        return { r, g, b, a: index === getTransparencyIndex(null) ? (avgAlpha ? ~~((r + g + b) / 3) : 0) : 255 };\n    };\n    const image = (() => {\n        try {\n            return new ImageData(frame.width, frame.height, { colorSpace: \"srgb\" });\n        }\n        catch (error) {\n            if (error instanceof DOMException && error.name === \"IndexSizeError\") {\n                return null;\n            }\n            throw error;\n        }\n    })();\n    if (image == null) {\n        throw new EvalError(\"GIF frame size is to large\");\n    }\n    const minCodeSize = byteStream.nextByte(), imageData = byteStream.readSubBlocksBin(), clearCode = 1 << minCodeSize;\n    const readBits = (pos, len) => {\n        const bytePos = pos >>> 3, bitPos = pos & 7;\n        return (((imageData[bytePos] + (imageData[bytePos + 1] << 8) + (imageData[bytePos + 2] << 16)) &\n            (((1 << len) - 1) << bitPos)) >>>\n            bitPos);\n    };\n    if (interlacedFlag) {\n        for (let code = 0, size = minCodeSize + 1, pos = 0, dic = [[0]], pass = 0; pass < 4; pass++) {\n            if (Constants_1.InterlaceOffsets[pass] < frame.height) {\n                for (let pixelPos = 0, lineIndex = 0;;) {\n                    const last = code;\n                    code = readBits(pos, size);\n                    pos += size + 1;\n                    if (code === clearCode) {\n                        size = minCodeSize + 1;\n                        dic.length = clearCode + 2;\n                        for (let i = 0; i < dic.length; i++) {\n                            dic[i] = i < clearCode ? [i] : [];\n                        }\n                    }\n                    else {\n                        if (code >= dic.length) {\n                            dic.push(dic[last].concat(dic[last][0]));\n                        }\n                        else if (last !== clearCode) {\n                            dic.push(dic[last].concat(dic[code][0]));\n                        }\n                        for (let i = 0; i < dic[code].length; i++) {\n                            const { r, g, b, a } = getColor(dic[code][i]);\n                            image.data.set([r, g, b, a], Constants_1.InterlaceOffsets[pass] * frame.width +\n                                Constants_1.InterlaceSteps[pass] * lineIndex +\n                                (pixelPos % (frame.width * 4)));\n                            pixelPos += 4;\n                        }\n                        if (dic.length === 1 << size && size < 0xc) {\n                            size++;\n                        }\n                    }\n                    if (pixelPos === frame.width * 4 * (lineIndex + 1)) {\n                        lineIndex++;\n                        if (Constants_1.InterlaceOffsets[pass] + Constants_1.InterlaceSteps[pass] * lineIndex >= frame.height) {\n                            break;\n                        }\n                    }\n                }\n            }\n            progressCallback?.(byteStream.pos / (byteStream.data.length - 1), getFrameIndex(false) + 1, image, { x: frame.left, y: frame.top }, { width: gif.width, height: gif.height });\n        }\n        frame.image = image;\n        frame.bitmap = await createImageBitmap(image);\n    }\n    else {\n        for (let code = 0, size = minCodeSize + 1, pos = 0, dic = [[0]], pixelPos = -4;;) {\n            const last = code;\n            code = readBits(pos, size);\n            pos += size;\n            if (code === clearCode) {\n                size = minCodeSize + 1;\n                dic.length = clearCode + 2;\n                for (let i = 0; i < dic.length; i++) {\n                    dic[i] = i < clearCode ? [i] : [];\n                }\n            }\n            else {\n                if (code === clearCode + 1) {\n                    break;\n                }\n                if (code >= dic.length) {\n                    dic.push(dic[last].concat(dic[last][0]));\n                }\n                else if (last !== clearCode) {\n                    dic.push(dic[last].concat(dic[code][0]));\n                }\n                for (let i = 0; i < dic[code].length; i++) {\n                    const { r, g, b, a } = getColor(dic[code][i]);\n                    image.data.set([r, g, b, a], (pixelPos += 4));\n                }\n                if (dic.length >= 1 << size && size < 0xc) {\n                    size++;\n                }\n            }\n        }\n        frame.image = image;\n        frame.bitmap = await createImageBitmap(image);\n        progressCallback?.((byteStream.pos + 1) / byteStream.data.length, getFrameIndex(false) + 1, frame.image, { x: frame.left, y: frame.top }, { width: gif.width, height: gif.height });\n    }\n}\nasync function parseBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback) {\n    switch (byteStream.nextByte()) {\n        case 59:\n            return true;\n        case 44:\n            await parseImageBlock(byteStream, gif, avgAlpha, getFrameIndex, getTransparencyIndex, progressCallback);\n            break;\n        case 33:\n            await parseExtensionBlock(byteStream, gif, getFrameIndex, getTransparencyIndex);\n            break;\n        default:\n            throw new EvalError(\"undefined block found\");\n    }\n    return false;\n}\nfunction getGIFLoopAmount(gif) {\n    for (const extension of gif.applicationExtensions) {\n        if (extension.identifier + extension.authenticationCode !== \"NETSCAPE2.0\") {\n            continue;\n        }\n        return extension.data[1] + (extension.data[2] << 8);\n    }\n    return NaN;\n}\nexports.getGIFLoopAmount = getGIFLoopAmount;\nasync function decodeGIF(gifURL, progressCallback, avgAlpha) {\n    if (!avgAlpha)\n        avgAlpha = false;\n    const res = await fetch(gifURL);\n    if (!res.ok && res.status === 404) {\n        throw new EvalError(\"file not found\");\n    }\n    const buffer = await res.arrayBuffer();\n    const gif = {\n        width: 0,\n        height: 0,\n        totalTime: 0,\n        colorRes: 0,\n        pixelAspectRatio: 0,\n        frames: [],\n        sortFlag: false,\n        globalColorTable: [],\n        backgroundImage: new ImageData(1, 1, { colorSpace: \"srgb\" }),\n        comments: [],\n        applicationExtensions: [],\n    }, byteStream = new ByteStream_1.ByteStream(new Uint8ClampedArray(buffer));\n    if (byteStream.getString(6) !== \"GIF89a\") {\n        throw new Error(\"not a supported GIF file\");\n    }\n    gif.width = byteStream.nextTwoBytes();\n    gif.height = byteStream.nextTwoBytes();\n    const packedByte = byteStream.nextByte(), globalColorTableFlag = (packedByte & 0x80) === 0x80;\n    gif.colorRes = (packedByte & 0x70) >>> 4;\n    gif.sortFlag = (packedByte & 8) === 8;\n    const globalColorCount = 1 << ((packedByte & 7) + 1), backgroundColorIndex = byteStream.nextByte();\n    gif.pixelAspectRatio = byteStream.nextByte();\n    if (gif.pixelAspectRatio !== 0) {\n        gif.pixelAspectRatio = (gif.pixelAspectRatio + 0xf) / 0x40;\n    }\n    if (globalColorTableFlag) {\n        gif.globalColorTable = parseColorTable(byteStream, globalColorCount);\n    }\n    const backgroundImage = (() => {\n        try {\n            return new ImageData(gif.width, gif.height, { colorSpace: \"srgb\" });\n        }\n        catch (error) {\n            if (error instanceof DOMException && error.name === \"IndexSizeError\") {\n                return null;\n            }\n            throw error;\n        }\n    })();\n    if (backgroundImage == null) {\n        throw new Error(\"GIF frame size is to large\");\n    }\n    const { r, g, b } = gif.globalColorTable[backgroundColorIndex];\n    backgroundImage.data.set(globalColorTableFlag ? [r, g, b, 255] : [0, 0, 0, 0]);\n    for (let i = 4; i < backgroundImage.data.length; i *= 2) {\n        backgroundImage.data.copyWithin(i, 0, i);\n    }\n    gif.backgroundImage = backgroundImage;\n    let frameIndex = -1, incrementFrameIndex = true, transparencyIndex = -1;\n    const getframeIndex = (increment) => {\n        if (increment) {\n            incrementFrameIndex = true;\n        }\n        return frameIndex;\n    };\n    const getTransparencyIndex = (newValue) => {\n        if (newValue != null) {\n            transparencyIndex = newValue;\n        }\n        return transparencyIndex;\n    };\n    try {\n        do {\n            if (incrementFrameIndex) {\n                gif.frames.push({\n                    left: 0,\n                    top: 0,\n                    width: 0,\n                    height: 0,\n                    disposalMethod: 0,\n                    image: new ImageData(1, 1, { colorSpace: \"srgb\" }),\n                    plainTextData: null,\n                    userInputDelayFlag: false,\n                    delayTime: 0,\n                    sortFlag: false,\n                    localColorTable: [],\n                    reserved: 0,\n                    GCreserved: 0,\n                });\n                frameIndex++;\n                transparencyIndex = -1;\n                incrementFrameIndex = false;\n            }\n        } while (!(await parseBlock(byteStream, gif, avgAlpha, getframeIndex, getTransparencyIndex, progressCallback)));\n        gif.frames.length--;\n        for (const frame of gif.frames) {\n            if (frame.userInputDelayFlag && frame.delayTime === 0) {\n                gif.totalTime = Infinity;\n                break;\n            }\n            gif.totalTime += frame.delayTime;\n        }\n        return gif;\n    }\n    catch (error) {\n        if (error instanceof EvalError) {\n            throw new Error(`error while parsing frame ${frameIndex} \"${error.message}\"`);\n        }\n        throw error;\n    }\n}\nexports.decodeGIF = decodeGIF;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tsparticles-shape-image/cjs/GifUtils/Utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tsparticles-shape-image/cjs/ImageDrawer.js":
/*!*****************************************************************!*\
  !*** ./node_modules/tsparticles-shape-image/cjs/ImageDrawer.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ImageDrawer = void 0;\nconst tsparticles_engine_1 = __webpack_require__(/*! tsparticles-engine */ \"(ssr)/./node_modules/tsparticles-engine/cjs/index.js\");\nconst Utils_1 = __webpack_require__(/*! ./Utils */ \"(ssr)/./node_modules/tsparticles-shape-image/cjs/Utils.js\");\nclass ImageDrawer {\n    constructor(engine) {\n        this.loadImageShape = async (imageShape) => {\n            if (!this._engine.loadImage) {\n                throw new Error(`${tsparticles_engine_1.errorPrefix} image shape not initialized`);\n            }\n            await this._engine.loadImage({\n                gif: imageShape.gif,\n                name: imageShape.name,\n                replaceColor: imageShape.replaceColor ?? imageShape.replace_color ?? false,\n                src: imageShape.src,\n            });\n        };\n        this._engine = engine;\n    }\n    addImage(image) {\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        this._engine.images.push(image);\n    }\n    draw(context, particle, radius, opacity, delta) {\n        const image = particle.image, element = image?.element;\n        if (!image) {\n            return;\n        }\n        context.globalAlpha = opacity;\n        if (image.gif && image.gifData) {\n            const offscreenCanvas = new OffscreenCanvas(image.gifData.width, image.gifData.height), offscreenContext = offscreenCanvas.getContext(\"2d\");\n            if (!offscreenContext) {\n                throw new Error(\"could not create offscreen canvas context\");\n            }\n            offscreenContext.imageSmoothingQuality = \"low\";\n            offscreenContext.imageSmoothingEnabled = false;\n            offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n            if (particle.gifLoopCount === undefined) {\n                particle.gifLoopCount = image.gifLoopCount ?? 0;\n            }\n            let frameIndex = particle.gifFrame ?? 0;\n            const pos = { x: -image.gifData.width * 0.5, y: -image.gifData.height * 0.5 }, frame = image.gifData.frames[frameIndex];\n            if (particle.gifTime === undefined) {\n                particle.gifTime = 0;\n            }\n            if (!frame.bitmap) {\n                return;\n            }\n            context.scale(radius / image.gifData.width, radius / image.gifData.height);\n            switch (frame.disposalMethod) {\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 0:\n                    offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n                    context.drawImage(offscreenCanvas, pos.x, pos.y);\n                    offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                    break;\n                case 1:\n                    offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n                    context.drawImage(offscreenCanvas, pos.x, pos.y);\n                    break;\n                case 2:\n                    offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n                    context.drawImage(offscreenCanvas, pos.x, pos.y);\n                    offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                    if (image.gifData.globalColorTable.length === 0) {\n                        offscreenContext.putImageData(image.gifData.frames[0].image, pos.x + frame.left, pos.y + frame.top);\n                    }\n                    else {\n                        offscreenContext.putImageData(image.gifData.backgroundImage, pos.x, pos.y);\n                    }\n                    break;\n                case 3:\n                    {\n                        const previousImageData = offscreenContext.getImageData(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                        offscreenContext.drawImage(frame.bitmap, frame.left, frame.top);\n                        context.drawImage(offscreenCanvas, pos.x, pos.y);\n                        offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                        offscreenContext.putImageData(previousImageData, 0, 0);\n                    }\n                    break;\n            }\n            particle.gifTime += delta.value;\n            if (particle.gifTime > frame.delayTime) {\n                particle.gifTime -= frame.delayTime;\n                if (++frameIndex >= image.gifData.frames.length) {\n                    if (--particle.gifLoopCount <= 0) {\n                        return;\n                    }\n                    frameIndex = 0;\n                    offscreenContext.clearRect(0, 0, offscreenCanvas.width, offscreenCanvas.height);\n                }\n                particle.gifFrame = frameIndex;\n            }\n            context.scale(image.gifData.width / radius, image.gifData.height / radius);\n        }\n        else if (element) {\n            const ratio = image.ratio, pos = {\n                x: -radius,\n                y: -radius,\n            };\n            context.drawImage(element, pos.x, pos.y, radius * 2, (radius * 2) / ratio);\n        }\n        context.globalAlpha = 1;\n    }\n    getSidesCount() {\n        return 12;\n    }\n    async init(container) {\n        const options = container.actualOptions;\n        if (!options.preload || !this._engine.loadImage) {\n            return;\n        }\n        for (const imageData of options.preload) {\n            await this._engine.loadImage(imageData);\n        }\n    }\n    loadShape(particle) {\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n            return;\n        }\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        const imageData = particle.shapeData, image = this._engine.images.find((t) => t.name === imageData.name || t.source === imageData.src);\n        if (!image) {\n            this.loadImageShape(imageData).then(() => {\n                this.loadShape(particle);\n            });\n        }\n    }\n    particleInit(container, particle) {\n        if (particle.shape !== \"image\" && particle.shape !== \"images\") {\n            return;\n        }\n        if (!this._engine.images) {\n            this._engine.images = [];\n        }\n        const images = this._engine.images, imageData = particle.shapeData, color = particle.getFillColor(), image = images.find((t) => t.name === imageData.name || t.source === imageData.src);\n        if (!image) {\n            return;\n        }\n        const replaceColor = imageData.replaceColor ?? imageData.replace_color ?? image.replaceColor;\n        if (image.loading) {\n            setTimeout(() => {\n                this.particleInit(container, particle);\n            });\n            return;\n        }\n        (async () => {\n            let imageRes;\n            if (image.svgData && color) {\n                imageRes = await (0, Utils_1.replaceImageColor)(image, imageData, color, particle);\n            }\n            else {\n                imageRes = {\n                    color,\n                    data: image,\n                    element: image.element,\n                    gif: image.gif,\n                    gifData: image.gifData,\n                    gifLoopCount: image.gifLoopCount,\n                    loaded: true,\n                    ratio: imageData.width && imageData.height ? imageData.width / imageData.height : image.ratio ?? 1,\n                    replaceColor: replaceColor,\n                    source: imageData.src,\n                };\n            }\n            if (!imageRes.ratio) {\n                imageRes.ratio = 1;\n            }\n            const fill = imageData.fill ?? particle.fill, close = imageData.close ?? particle.close, imageShape = {\n                image: imageRes,\n                fill,\n                close,\n            };\n            particle.image = imageShape.image;\n            particle.fill = imageShape.fill;\n            particle.close = imageShape.close;\n        })();\n    }\n}\nexports.ImageDrawer = ImageDrawer;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tsparticles-shape-image/cjs/ImageDrawer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tsparticles-shape-image/cjs/ImagePreloader.js":
/*!********************************************************************!*\
  !*** ./node_modules/tsparticles-shape-image/cjs/ImagePreloader.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ImagePreloaderPlugin = void 0;\nconst Preload_1 = __webpack_require__(/*! ./Options/Classes/Preload */ \"(ssr)/./node_modules/tsparticles-shape-image/cjs/Options/Classes/Preload.js\");\nclass ImagePreloaderPlugin {\n    constructor(engine) {\n        this.id = \"imagePreloader\";\n        this._engine = engine;\n    }\n    getPlugin() {\n        return {};\n    }\n    loadOptions(options, source) {\n        if (!source || !source.preload) {\n            return;\n        }\n        if (!options.preload) {\n            options.preload = [];\n        }\n        const preloadOptions = options.preload;\n        for (const item of source.preload) {\n            const existing = preloadOptions.find((t) => t.name === item.name || t.src === item.src);\n            if (existing) {\n                existing.load(item);\n            }\n            else {\n                const preload = new Preload_1.Preload();\n                preload.load(item);\n                preloadOptions.push(preload);\n            }\n        }\n    }\n    needsPlugin() {\n        return true;\n    }\n}\nexports.ImagePreloaderPlugin = ImagePreloaderPlugin;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMtc2hhcGUtaW1hZ2UvY2pzL0ltYWdlUHJlbG9hZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDRCQUE0QjtBQUM1QixrQkFBa0IsbUJBQU8sQ0FBQyw4R0FBMkI7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzLXNoYXBlLWltYWdlL2Nqcy9JbWFnZVByZWxvYWRlci5qcz9mNzY0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5JbWFnZVByZWxvYWRlclBsdWdpbiA9IHZvaWQgMDtcbmNvbnN0IFByZWxvYWRfMSA9IHJlcXVpcmUoXCIuL09wdGlvbnMvQ2xhc3Nlcy9QcmVsb2FkXCIpO1xuY2xhc3MgSW1hZ2VQcmVsb2FkZXJQbHVnaW4ge1xuICAgIGNvbnN0cnVjdG9yKGVuZ2luZSkge1xuICAgICAgICB0aGlzLmlkID0gXCJpbWFnZVByZWxvYWRlclwiO1xuICAgICAgICB0aGlzLl9lbmdpbmUgPSBlbmdpbmU7XG4gICAgfVxuICAgIGdldFBsdWdpbigpIHtcbiAgICAgICAgcmV0dXJuIHt9O1xuICAgIH1cbiAgICBsb2FkT3B0aW9ucyhvcHRpb25zLCBzb3VyY2UpIHtcbiAgICAgICAgaWYgKCFzb3VyY2UgfHwgIXNvdXJjZS5wcmVsb2FkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFvcHRpb25zLnByZWxvYWQpIHtcbiAgICAgICAgICAgIG9wdGlvbnMucHJlbG9hZCA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHByZWxvYWRPcHRpb25zID0gb3B0aW9ucy5wcmVsb2FkO1xuICAgICAgICBmb3IgKGNvbnN0IGl0ZW0gb2Ygc291cmNlLnByZWxvYWQpIHtcbiAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nID0gcHJlbG9hZE9wdGlvbnMuZmluZCgodCkgPT4gdC5uYW1lID09PSBpdGVtLm5hbWUgfHwgdC5zcmMgPT09IGl0ZW0uc3JjKTtcbiAgICAgICAgICAgIGlmIChleGlzdGluZykge1xuICAgICAgICAgICAgICAgIGV4aXN0aW5nLmxvYWQoaXRlbSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwcmVsb2FkID0gbmV3IFByZWxvYWRfMS5QcmVsb2FkKCk7XG4gICAgICAgICAgICAgICAgcHJlbG9hZC5sb2FkKGl0ZW0pO1xuICAgICAgICAgICAgICAgIHByZWxvYWRPcHRpb25zLnB1c2gocHJlbG9hZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgbmVlZHNQbHVnaW4oKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbn1cbmV4cG9ydHMuSW1hZ2VQcmVsb2FkZXJQbHVnaW4gPSBJbWFnZVByZWxvYWRlclBsdWdpbjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tsparticles-shape-image/cjs/ImagePreloader.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tsparticles-shape-image/cjs/Options/Classes/Preload.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/tsparticles-shape-image/cjs/Options/Classes/Preload.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Preload = void 0;\nclass Preload {\n    constructor() {\n        this.src = \"\";\n        this.gif = false;\n    }\n    load(data) {\n        if (!data) {\n            return;\n        }\n        if (data.gif !== undefined) {\n            this.gif = data.gif;\n        }\n        if (data.height !== undefined) {\n            this.height = data.height;\n        }\n        if (data.name !== undefined) {\n            this.name = data.name;\n        }\n        if (data.replaceColor !== undefined) {\n            this.replaceColor = data.replaceColor;\n        }\n        if (data.src !== undefined) {\n            this.src = data.src;\n        }\n        if (data.width !== undefined) {\n            this.width = data.width;\n        }\n    }\n}\nexports.Preload = Preload;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMtc2hhcGUtaW1hZ2UvY2pzL09wdGlvbnMvQ2xhc3Nlcy9QcmVsb2FkLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzLXNoYXBlLWltYWdlL2Nqcy9PcHRpb25zL0NsYXNzZXMvUHJlbG9hZC5qcz84NzRiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5QcmVsb2FkID0gdm9pZCAwO1xuY2xhc3MgUHJlbG9hZCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuc3JjID0gXCJcIjtcbiAgICAgICAgdGhpcy5naWYgPSBmYWxzZTtcbiAgICB9XG4gICAgbG9hZChkYXRhKSB7XG4gICAgICAgIGlmICghZGF0YSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLmdpZiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmdpZiA9IGRhdGEuZ2lmO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLmhlaWdodCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmhlaWdodCA9IGRhdGEuaGVpZ2h0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLm5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5uYW1lID0gZGF0YS5uYW1lO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLnJlcGxhY2VDb2xvciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnJlcGxhY2VDb2xvciA9IGRhdGEucmVwbGFjZUNvbG9yO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLnNyYyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnNyYyA9IGRhdGEuc3JjO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkYXRhLndpZHRoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSBkYXRhLndpZHRoO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5QcmVsb2FkID0gUHJlbG9hZDtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tsparticles-shape-image/cjs/Options/Classes/Preload.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tsparticles-shape-image/cjs/Utils.js":
/*!***********************************************************!*\
  !*** ./node_modules/tsparticles-shape-image/cjs/Utils.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.replaceImageColor = exports.downloadSvgImage = exports.loadGifImage = exports.loadImage = void 0;\nconst tsparticles_engine_1 = __webpack_require__(/*! tsparticles-engine */ \"(ssr)/./node_modules/tsparticles-engine/cjs/index.js\");\nconst Utils_1 = __webpack_require__(/*! ./GifUtils/Utils */ \"(ssr)/./node_modules/tsparticles-shape-image/cjs/GifUtils/Utils.js\");\nconst currentColorRegex = /(#(?:[0-9a-f]{2}){2,4}|(#[0-9a-f]{3})|(rgb|hsl)a?\\((-?\\d+%?[,\\s]+){2,3}\\s*[\\d.]+%?\\))|currentcolor/gi;\nfunction replaceColorSvg(imageShape, color, opacity) {\n    const { svgData } = imageShape;\n    if (!svgData) {\n        return \"\";\n    }\n    const colorStyle = (0, tsparticles_engine_1.getStyleFromHsl)(color, opacity);\n    if (svgData.includes(\"fill\")) {\n        return svgData.replace(currentColorRegex, () => colorStyle);\n    }\n    const preFillIndex = svgData.indexOf(\">\");\n    return `${svgData.substring(0, preFillIndex)} fill=\"${colorStyle}\"${svgData.substring(preFillIndex)}`;\n}\nasync function loadImage(image) {\n    return new Promise((resolve) => {\n        image.loading = true;\n        const img = new Image();\n        image.element = img;\n        img.addEventListener(\"load\", () => {\n            image.loading = false;\n            resolve();\n        });\n        img.addEventListener(\"error\", () => {\n            image.element = undefined;\n            image.error = true;\n            image.loading = false;\n            (0, tsparticles_engine_1.getLogger)().error(`${tsparticles_engine_1.errorPrefix} loading image: ${image.source}`);\n            resolve();\n        });\n        img.src = image.source;\n    });\n}\nexports.loadImage = loadImage;\nasync function loadGifImage(image) {\n    if (image.type !== \"gif\") {\n        await loadImage(image);\n        return;\n    }\n    image.loading = true;\n    try {\n        image.gifData = await (0, Utils_1.decodeGIF)(image.source);\n        image.gifLoopCount = (0, Utils_1.getGIFLoopAmount)(image.gifData) ?? 0;\n        if (image.gifLoopCount === 0) {\n            image.gifLoopCount = Infinity;\n        }\n    }\n    catch {\n        image.error = true;\n    }\n    image.loading = false;\n}\nexports.loadGifImage = loadGifImage;\nasync function downloadSvgImage(image) {\n    if (image.type !== \"svg\") {\n        await loadImage(image);\n        return;\n    }\n    image.loading = true;\n    const response = await fetch(image.source);\n    if (!response.ok) {\n        (0, tsparticles_engine_1.getLogger)().error(`${tsparticles_engine_1.errorPrefix} Image not found`);\n        image.error = true;\n    }\n    else {\n        image.svgData = await response.text();\n    }\n    image.loading = false;\n}\nexports.downloadSvgImage = downloadSvgImage;\nfunction replaceImageColor(image, imageData, color, particle) {\n    const svgColoredData = replaceColorSvg(image, color, particle.opacity?.value ?? 1), imageRes = {\n        color,\n        gif: imageData.gif,\n        data: {\n            ...image,\n            svgData: svgColoredData,\n        },\n        loaded: false,\n        ratio: imageData.width / imageData.height,\n        replaceColor: imageData.replaceColor ?? imageData.replace_color,\n        source: imageData.src,\n    };\n    return new Promise((resolve) => {\n        const svg = new Blob([svgColoredData], { type: \"image/svg+xml\" }), domUrl = URL || window.URL || window.webkitURL || window, url = domUrl.createObjectURL(svg), img = new Image();\n        img.addEventListener(\"load\", () => {\n            imageRes.loaded = true;\n            imageRes.element = img;\n            resolve(imageRes);\n            domUrl.revokeObjectURL(url);\n        });\n        img.addEventListener(\"error\", async () => {\n            domUrl.revokeObjectURL(url);\n            const img2 = {\n                ...image,\n                error: false,\n                loading: true,\n            };\n            await loadImage(img2);\n            imageRes.loaded = true;\n            imageRes.element = img2.element;\n            resolve(imageRes);\n        });\n        img.src = url;\n    });\n}\nexports.replaceImageColor = replaceImageColor;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMtc2hhcGUtaW1hZ2UvY2pzL1V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QixHQUFHLHdCQUF3QixHQUFHLG9CQUFvQixHQUFHLGlCQUFpQjtBQUMvRiw2QkFBNkIsbUJBQU8sQ0FBQyxnRkFBb0I7QUFDekQsZ0JBQWdCLG1CQUFPLENBQUMsNEZBQWtCO0FBQzFDLHlDQUF5QyxFQUFFLEVBQUUsSUFBSSxZQUFZLEVBQUUsK0JBQStCLElBQUk7QUFDbEc7QUFDQSxZQUFZLFVBQVU7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsb0NBQW9DLFFBQVEsV0FBVyxHQUFHLGdDQUFnQztBQUN4RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBMkQsa0NBQWtDLGlCQUFpQixhQUFhO0FBQzNIO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVELGtDQUFrQztBQUN6RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsdUJBQXVCO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7QUFDTDtBQUNBLHlCQUF5QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zyb250ZW5kLy4vbm9kZV9tb2R1bGVzL3RzcGFydGljbGVzLXNoYXBlLWltYWdlL2Nqcy9VdGlscy5qcz9jMDQxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZXBsYWNlSW1hZ2VDb2xvciA9IGV4cG9ydHMuZG93bmxvYWRTdmdJbWFnZSA9IGV4cG9ydHMubG9hZEdpZkltYWdlID0gZXhwb3J0cy5sb2FkSW1hZ2UgPSB2b2lkIDA7XG5jb25zdCB0c3BhcnRpY2xlc19lbmdpbmVfMSA9IHJlcXVpcmUoXCJ0c3BhcnRpY2xlcy1lbmdpbmVcIik7XG5jb25zdCBVdGlsc18xID0gcmVxdWlyZShcIi4vR2lmVXRpbHMvVXRpbHNcIik7XG5jb25zdCBjdXJyZW50Q29sb3JSZWdleCA9IC8oIyg/OlswLTlhLWZdezJ9KXsyLDR9fCgjWzAtOWEtZl17M30pfChyZ2J8aHNsKWE/XFwoKC0/XFxkKyU/WyxcXHNdKyl7MiwzfVxccypbXFxkLl0rJT9cXCkpfGN1cnJlbnRjb2xvci9naTtcbmZ1bmN0aW9uIHJlcGxhY2VDb2xvclN2ZyhpbWFnZVNoYXBlLCBjb2xvciwgb3BhY2l0eSkge1xuICAgIGNvbnN0IHsgc3ZnRGF0YSB9ID0gaW1hZ2VTaGFwZTtcbiAgICBpZiAoIXN2Z0RhdGEpIHtcbiAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgfVxuICAgIGNvbnN0IGNvbG9yU3R5bGUgPSAoMCwgdHNwYXJ0aWNsZXNfZW5naW5lXzEuZ2V0U3R5bGVGcm9tSHNsKShjb2xvciwgb3BhY2l0eSk7XG4gICAgaWYgKHN2Z0RhdGEuaW5jbHVkZXMoXCJmaWxsXCIpKSB7XG4gICAgICAgIHJldHVybiBzdmdEYXRhLnJlcGxhY2UoY3VycmVudENvbG9yUmVnZXgsICgpID0+IGNvbG9yU3R5bGUpO1xuICAgIH1cbiAgICBjb25zdCBwcmVGaWxsSW5kZXggPSBzdmdEYXRhLmluZGV4T2YoXCI+XCIpO1xuICAgIHJldHVybiBgJHtzdmdEYXRhLnN1YnN0cmluZygwLCBwcmVGaWxsSW5kZXgpfSBmaWxsPVwiJHtjb2xvclN0eWxlfVwiJHtzdmdEYXRhLnN1YnN0cmluZyhwcmVGaWxsSW5kZXgpfWA7XG59XG5hc3luYyBmdW5jdGlvbiBsb2FkSW1hZ2UoaW1hZ2UpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgaW1hZ2UubG9hZGluZyA9IHRydWU7XG4gICAgICAgIGNvbnN0IGltZyA9IG5ldyBJbWFnZSgpO1xuICAgICAgICBpbWFnZS5lbGVtZW50ID0gaW1nO1xuICAgICAgICBpbWcuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgKCkgPT4ge1xuICAgICAgICAgICAgaW1hZ2UubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgaW1nLmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCAoKSA9PiB7XG4gICAgICAgICAgICBpbWFnZS5lbGVtZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgaW1hZ2UuZXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgaW1hZ2UubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICAgICAgKDAsIHRzcGFydGljbGVzX2VuZ2luZV8xLmdldExvZ2dlcikoKS5lcnJvcihgJHt0c3BhcnRpY2xlc19lbmdpbmVfMS5lcnJvclByZWZpeH0gbG9hZGluZyBpbWFnZTogJHtpbWFnZS5zb3VyY2V9YCk7XG4gICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBpbWcuc3JjID0gaW1hZ2Uuc291cmNlO1xuICAgIH0pO1xufVxuZXhwb3J0cy5sb2FkSW1hZ2UgPSBsb2FkSW1hZ2U7XG5hc3luYyBmdW5jdGlvbiBsb2FkR2lmSW1hZ2UoaW1hZ2UpIHtcbiAgICBpZiAoaW1hZ2UudHlwZSAhPT0gXCJnaWZcIikge1xuICAgICAgICBhd2FpdCBsb2FkSW1hZ2UoaW1hZ2UpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGltYWdlLmxvYWRpbmcgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICAgIGltYWdlLmdpZkRhdGEgPSBhd2FpdCAoMCwgVXRpbHNfMS5kZWNvZGVHSUYpKGltYWdlLnNvdXJjZSk7XG4gICAgICAgIGltYWdlLmdpZkxvb3BDb3VudCA9ICgwLCBVdGlsc18xLmdldEdJRkxvb3BBbW91bnQpKGltYWdlLmdpZkRhdGEpID8/IDA7XG4gICAgICAgIGlmIChpbWFnZS5naWZMb29wQ291bnQgPT09IDApIHtcbiAgICAgICAgICAgIGltYWdlLmdpZkxvb3BDb3VudCA9IEluZmluaXR5O1xuICAgICAgICB9XG4gICAgfVxuICAgIGNhdGNoIHtcbiAgICAgICAgaW1hZ2UuZXJyb3IgPSB0cnVlO1xuICAgIH1cbiAgICBpbWFnZS5sb2FkaW5nID0gZmFsc2U7XG59XG5leHBvcnRzLmxvYWRHaWZJbWFnZSA9IGxvYWRHaWZJbWFnZTtcbmFzeW5jIGZ1bmN0aW9uIGRvd25sb2FkU3ZnSW1hZ2UoaW1hZ2UpIHtcbiAgICBpZiAoaW1hZ2UudHlwZSAhPT0gXCJzdmdcIikge1xuICAgICAgICBhd2FpdCBsb2FkSW1hZ2UoaW1hZ2UpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGltYWdlLmxvYWRpbmcgPSB0cnVlO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goaW1hZ2Uuc291cmNlKTtcbiAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgICgwLCB0c3BhcnRpY2xlc19lbmdpbmVfMS5nZXRMb2dnZXIpKCkuZXJyb3IoYCR7dHNwYXJ0aWNsZXNfZW5naW5lXzEuZXJyb3JQcmVmaXh9IEltYWdlIG5vdCBmb3VuZGApO1xuICAgICAgICBpbWFnZS5lcnJvciA9IHRydWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpbWFnZS5zdmdEYXRhID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xuICAgIH1cbiAgICBpbWFnZS5sb2FkaW5nID0gZmFsc2U7XG59XG5leHBvcnRzLmRvd25sb2FkU3ZnSW1hZ2UgPSBkb3dubG9hZFN2Z0ltYWdlO1xuZnVuY3Rpb24gcmVwbGFjZUltYWdlQ29sb3IoaW1hZ2UsIGltYWdlRGF0YSwgY29sb3IsIHBhcnRpY2xlKSB7XG4gICAgY29uc3Qgc3ZnQ29sb3JlZERhdGEgPSByZXBsYWNlQ29sb3JTdmcoaW1hZ2UsIGNvbG9yLCBwYXJ0aWNsZS5vcGFjaXR5Py52YWx1ZSA/PyAxKSwgaW1hZ2VSZXMgPSB7XG4gICAgICAgIGNvbG9yLFxuICAgICAgICBnaWY6IGltYWdlRGF0YS5naWYsXG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgIC4uLmltYWdlLFxuICAgICAgICAgICAgc3ZnRGF0YTogc3ZnQ29sb3JlZERhdGEsXG4gICAgICAgIH0sXG4gICAgICAgIGxvYWRlZDogZmFsc2UsXG4gICAgICAgIHJhdGlvOiBpbWFnZURhdGEud2lkdGggLyBpbWFnZURhdGEuaGVpZ2h0LFxuICAgICAgICByZXBsYWNlQ29sb3I6IGltYWdlRGF0YS5yZXBsYWNlQ29sb3IgPz8gaW1hZ2VEYXRhLnJlcGxhY2VfY29sb3IsXG4gICAgICAgIHNvdXJjZTogaW1hZ2VEYXRhLnNyYyxcbiAgICB9O1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICBjb25zdCBzdmcgPSBuZXcgQmxvYihbc3ZnQ29sb3JlZERhdGFdLCB7IHR5cGU6IFwiaW1hZ2Uvc3ZnK3htbFwiIH0pLCBkb21VcmwgPSBVUkwgfHwgd2luZG93LlVSTCB8fCB3aW5kb3cud2Via2l0VVJMIHx8IHdpbmRvdywgdXJsID0gZG9tVXJsLmNyZWF0ZU9iamVjdFVSTChzdmcpLCBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgaW1nLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsICgpID0+IHtcbiAgICAgICAgICAgIGltYWdlUmVzLmxvYWRlZCA9IHRydWU7XG4gICAgICAgICAgICBpbWFnZVJlcy5lbGVtZW50ID0gaW1nO1xuICAgICAgICAgICAgcmVzb2x2ZShpbWFnZVJlcyk7XG4gICAgICAgICAgICBkb21VcmwucmV2b2tlT2JqZWN0VVJMKHVybCk7XG4gICAgICAgIH0pO1xuICAgICAgICBpbWcuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGRvbVVybC5yZXZva2VPYmplY3RVUkwodXJsKTtcbiAgICAgICAgICAgIGNvbnN0IGltZzIgPSB7XG4gICAgICAgICAgICAgICAgLi4uaW1hZ2UsXG4gICAgICAgICAgICAgICAgZXJyb3I6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGxvYWRpbmc6IHRydWUsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgYXdhaXQgbG9hZEltYWdlKGltZzIpO1xuICAgICAgICAgICAgaW1hZ2VSZXMubG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGltYWdlUmVzLmVsZW1lbnQgPSBpbWcyLmVsZW1lbnQ7XG4gICAgICAgICAgICByZXNvbHZlKGltYWdlUmVzKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGltZy5zcmMgPSB1cmw7XG4gICAgfSk7XG59XG5leHBvcnRzLnJlcGxhY2VJbWFnZUNvbG9yID0gcmVwbGFjZUltYWdlQ29sb3I7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tsparticles-shape-image/cjs/Utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/tsparticles-shape-image/cjs/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/tsparticles-shape-image/cjs/index.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.loadImageShape = void 0;\nconst Utils_1 = __webpack_require__(/*! ./Utils */ \"(ssr)/./node_modules/tsparticles-shape-image/cjs/Utils.js\");\nconst ImageDrawer_1 = __webpack_require__(/*! ./ImageDrawer */ \"(ssr)/./node_modules/tsparticles-shape-image/cjs/ImageDrawer.js\");\nconst ImagePreloader_1 = __webpack_require__(/*! ./ImagePreloader */ \"(ssr)/./node_modules/tsparticles-shape-image/cjs/ImagePreloader.js\");\nconst tsparticles_engine_1 = __webpack_require__(/*! tsparticles-engine */ \"(ssr)/./node_modules/tsparticles-engine/cjs/index.js\");\nfunction addLoadImageToEngine(engine) {\n    if (engine.loadImage) {\n        return;\n    }\n    engine.loadImage = async (data) => {\n        if (!data.name && !data.src) {\n            throw new Error(`${tsparticles_engine_1.errorPrefix} no image source provided`);\n        }\n        if (!engine.images) {\n            engine.images = [];\n        }\n        if (engine.images.find((t) => t.name === data.name || t.source === data.src)) {\n            return;\n        }\n        try {\n            const image = {\n                gif: data.gif ?? false,\n                name: data.name ?? data.src,\n                source: data.src,\n                type: data.src.substring(data.src.length - 3),\n                error: false,\n                loading: true,\n                replaceColor: data.replaceColor,\n                ratio: data.width && data.height ? data.width / data.height : undefined,\n            };\n            engine.images.push(image);\n            const imageFunc = data.gif ? Utils_1.loadGifImage : data.replaceColor ? Utils_1.downloadSvgImage : Utils_1.loadImage;\n            await imageFunc(image);\n        }\n        catch {\n            throw new Error(`${tsparticles_engine_1.errorPrefix} ${data.name ?? data.src} not found`);\n        }\n    };\n}\nasync function loadImageShape(engine, refresh = true) {\n    addLoadImageToEngine(engine);\n    const preloader = new ImagePreloader_1.ImagePreloaderPlugin(engine);\n    await engine.addPlugin(preloader, refresh);\n    await engine.addShape([\"image\", \"images\"], new ImageDrawer_1.ImageDrawer(engine), refresh);\n}\nexports.loadImageShape = loadImageShape;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMtc2hhcGUtaW1hZ2UvY2pzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNCQUFzQjtBQUN0QixnQkFBZ0IsbUJBQU8sQ0FBQywwRUFBUztBQUNqQyxzQkFBc0IsbUJBQU8sQ0FBQyxzRkFBZTtBQUM3Qyx5QkFBeUIsbUJBQU8sQ0FBQyw0RkFBa0I7QUFDbkQsNkJBQTZCLG1CQUFPLENBQUMsZ0ZBQW9CO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixrQ0FBa0M7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixrQ0FBa0MsRUFBRSx1QkFBdUI7QUFDMUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvdHNwYXJ0aWNsZXMtc2hhcGUtaW1hZ2UvY2pzL2luZGV4LmpzPzBlMzUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmxvYWRJbWFnZVNoYXBlID0gdm9pZCAwO1xuY29uc3QgVXRpbHNfMSA9IHJlcXVpcmUoXCIuL1V0aWxzXCIpO1xuY29uc3QgSW1hZ2VEcmF3ZXJfMSA9IHJlcXVpcmUoXCIuL0ltYWdlRHJhd2VyXCIpO1xuY29uc3QgSW1hZ2VQcmVsb2FkZXJfMSA9IHJlcXVpcmUoXCIuL0ltYWdlUHJlbG9hZGVyXCIpO1xuY29uc3QgdHNwYXJ0aWNsZXNfZW5naW5lXzEgPSByZXF1aXJlKFwidHNwYXJ0aWNsZXMtZW5naW5lXCIpO1xuZnVuY3Rpb24gYWRkTG9hZEltYWdlVG9FbmdpbmUoZW5naW5lKSB7XG4gICAgaWYgKGVuZ2luZS5sb2FkSW1hZ2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlbmdpbmUubG9hZEltYWdlID0gYXN5bmMgKGRhdGEpID0+IHtcbiAgICAgICAgaWYgKCFkYXRhLm5hbWUgJiYgIWRhdGEuc3JjKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7dHNwYXJ0aWNsZXNfZW5naW5lXzEuZXJyb3JQcmVmaXh9IG5vIGltYWdlIHNvdXJjZSBwcm92aWRlZGApO1xuICAgICAgICB9XG4gICAgICAgIGlmICghZW5naW5lLmltYWdlcykge1xuICAgICAgICAgICAgZW5naW5lLmltYWdlcyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbmdpbmUuaW1hZ2VzLmZpbmQoKHQpID0+IHQubmFtZSA9PT0gZGF0YS5uYW1lIHx8IHQuc291cmNlID09PSBkYXRhLnNyYykpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgaW1hZ2UgPSB7XG4gICAgICAgICAgICAgICAgZ2lmOiBkYXRhLmdpZiA/PyBmYWxzZSxcbiAgICAgICAgICAgICAgICBuYW1lOiBkYXRhLm5hbWUgPz8gZGF0YS5zcmMsXG4gICAgICAgICAgICAgICAgc291cmNlOiBkYXRhLnNyYyxcbiAgICAgICAgICAgICAgICB0eXBlOiBkYXRhLnNyYy5zdWJzdHJpbmcoZGF0YS5zcmMubGVuZ3RoIC0gMyksXG4gICAgICAgICAgICAgICAgZXJyb3I6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGxvYWRpbmc6IHRydWUsXG4gICAgICAgICAgICAgICAgcmVwbGFjZUNvbG9yOiBkYXRhLnJlcGxhY2VDb2xvcixcbiAgICAgICAgICAgICAgICByYXRpbzogZGF0YS53aWR0aCAmJiBkYXRhLmhlaWdodCA/IGRhdGEud2lkdGggLyBkYXRhLmhlaWdodCA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBlbmdpbmUuaW1hZ2VzLnB1c2goaW1hZ2UpO1xuICAgICAgICAgICAgY29uc3QgaW1hZ2VGdW5jID0gZGF0YS5naWYgPyBVdGlsc18xLmxvYWRHaWZJbWFnZSA6IGRhdGEucmVwbGFjZUNvbG9yID8gVXRpbHNfMS5kb3dubG9hZFN2Z0ltYWdlIDogVXRpbHNfMS5sb2FkSW1hZ2U7XG4gICAgICAgICAgICBhd2FpdCBpbWFnZUZ1bmMoaW1hZ2UpO1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgJHt0c3BhcnRpY2xlc19lbmdpbmVfMS5lcnJvclByZWZpeH0gJHtkYXRhLm5hbWUgPz8gZGF0YS5zcmN9IG5vdCBmb3VuZGApO1xuICAgICAgICB9XG4gICAgfTtcbn1cbmFzeW5jIGZ1bmN0aW9uIGxvYWRJbWFnZVNoYXBlKGVuZ2luZSwgcmVmcmVzaCA9IHRydWUpIHtcbiAgICBhZGRMb2FkSW1hZ2VUb0VuZ2luZShlbmdpbmUpO1xuICAgIGNvbnN0IHByZWxvYWRlciA9IG5ldyBJbWFnZVByZWxvYWRlcl8xLkltYWdlUHJlbG9hZGVyUGx1Z2luKGVuZ2luZSk7XG4gICAgYXdhaXQgZW5naW5lLmFkZFBsdWdpbihwcmVsb2FkZXIsIHJlZnJlc2gpO1xuICAgIGF3YWl0IGVuZ2luZS5hZGRTaGFwZShbXCJpbWFnZVwiLCBcImltYWdlc1wiXSwgbmV3IEltYWdlRHJhd2VyXzEuSW1hZ2VEcmF3ZXIoZW5naW5lKSwgcmVmcmVzaCk7XG59XG5leHBvcnRzLmxvYWRJbWFnZVNoYXBlID0gbG9hZEltYWdlU2hhcGU7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/tsparticles-shape-image/cjs/index.js\n");

/***/ })

};
;